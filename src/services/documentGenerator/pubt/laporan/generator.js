'use strict';

const PizZip = require('pizzip');
const Docxtemplater = require('docxtemplater');
const { storage, BUCKET_NAME } = require('../../../../utils/storage');

const getCheckmark = (status) => (status === true ? '√' : '');
const getOppositeCheckmark = (status) => (status === false ? '√' : '');

const createLaporanPubt = async (data) => {
    const templatePath = 'pubt/laporanPubt.docx';

    let content;
    try {
        [content] = await storage.bucket(BUCKET_NAME).file(templatePath).download();
    } catch (error) {
        console.error('Gagal mengunduh template Laporan PUBT:', error);
        throw new Error('Template dokumen Laporan PUBT tidak dapat diakses.');
    }

    const zip = new PizZip(content);
    const doc = new Docxtemplater(zip, {
        paragraphLoop: true,
        linebreaks: true,
        nullGetter: () => ""
    });

    const g = data.generalData || {};
    const t = data.technicalData || {};
    const i = data.inspectionAndMeasurement || {};
    const vc = i.visualChecks || {};
    const se = vc.steamEquipment || {};
    const bd = vc.boilerDetails || {};
    const sd = vc.safetyDevices || {};
    const mt = i.materialThickness || {};
    const tms = i.thicknessMeasurementSetup || {};
    const mr = i.measurementResults || {};
    const ndt = i.ndt || {};
    const ac = i.appendagesCheck || {};

    const renderData = {
        examinationType: data.examinationType,
        companyName: g.companyName,
        companyLocation: g.companyLocation,
        userUsage: g.userUsage,
        userAddress: g.userAddress,
        operatorName: g.operatorName,
        equipmentType: g.equipmentType,
        manufacturer: g.manufacturer,
        brandType: g.brandType,
        countryAndYearOfManufacture: g.countryAndYearOfManufacture,
        serialNumberUnitNumber: g.serialNumberUnitNumber,
        designPressure: g.designPressure,
        maxAllowableWorkingPressure: g.maxAllowableWorkingPressure,
        capacityWorkingLoad: g.capacityWorkingLoad,
        steamTemperature: g.steamTemperature,
        operatingPressure: g.operatingPressure,
        fuelType: g.fuelType,
        intendedUse: g.intendedUse,
        permitNumber: g.permitNumber,
        operatorCertificate: g.operatorCertificate,
        equipmentHistory: g.equipmentHistory,
        inspectionDate: g.inspectionDate,

        technicalDataShellNumberOfRounds: t.shell?.numberOfRounds,
        technicalDataShellConnectionMethod: t.shell?.connectionMethod,
        technicalDataShellMaterial: t.shell?.material,
        technicalDataShellPipeDiameter: t.shell?.pipeDiameter,
        technicalDataShellThickness: t.shell?.thickness,
        technicalDataShellBodyLength: t.shell?.bodyLength,
        technicalDataShellHeadsTopDiameter: t.shell?.heads?.top?.diameter,
        technicalDataShellHeadsTopThickness: t.shell?.heads?.top?.thickness,
        technicalDataShellHeadsRearDiameter: t.shell?.heads?.rear?.diameter,
        technicalDataShellHeadsRearThickness: t.shell?.heads?.rear?.thickness,
        technicalDataShellTubePlateFrontDim1: t.shell?.tubePlate?.front?.dim1,
        technicalDataShellTubePlateFrontDim2: t.shell?.tubePlate?.front?.dim2,
        technicalDataShellTubePlateRearDim1: t.shell?.tubePlate?.rear?.dim1,
        technicalDataShellTubePlateRearDim2: t.shell?.tubePlate?.rear?.dim2,
        technicalDataFurnaceMaterial: t.furnace?.material,
        technicalDataFurnaceOuterDiameter: t.furnace?.outerDiameter,
        technicalDataFurnaceInnerDiameter: t.furnace?.innerDiameter,
        technicalDataFurnaceThickness: t.furnace?.thickness,
        technicalDataWaterTubesFirstPassDiameter: t.waterTubes?.firstPass?.diameter,
        technicalDataWaterTubesFirstPassThickness: t.waterTubes?.firstPass?.thickness,
        technicalDataWaterTubesFirstPassLength: t.waterTubes?.firstPass?.length,
        technicalDataWaterTubesFirstPassQuantity: t.waterTubes?.firstPass?.quantity,
        technicalDataWaterTubesSecondPassDiameter: t.waterTubes?.secondPass?.diameter,
        technicalDataWaterTubesSecondPassThickness: t.waterTubes?.secondPass?.thickness,
        technicalDataWaterTubesSecondPassLength: t.waterTubes?.secondPass?.length,
        technicalDataWaterTubesSecondPassQuantity: t.waterTubes?.secondPass?.quantity,
        technicalDataWaterTubesStayTubeDiameter: t.waterTubes?.stayTube?.diameter,
        technicalDataWaterTubesStayTubeThickness: t.waterTubes?.stayTube?.thickness,
        technicalDataWaterTubesStayTubeLength: t.waterTubes?.stayTube?.length,
        technicalDataWaterTubesStayTubeQuantity: t.waterTubes?.stayTube?.quantity,
        technicalDataWaterTubesMaterialDiameter: t.waterTubes?.material?.diameter,
        technicalDataWaterTubesMaterialThickness: t.waterTubes?.material?.thickness,
        technicalDataWaterTubesMaterialLength: t.waterTubes?.material?.length,
        technicalDataWaterTubesMaterialQuantity: t.waterTubes?.material?.quantity,
        tubePlateSplicing: t.tubePlateSplicing,

        visualCheckSteamEquipmentShellDrumTrue: getCheckmark(se.shellDrum?.status),
        visualCheckSteamEquipmentShellDrumFalse: getOppositeCheckmark(se.shellDrum?.status),
        visualCheckSteamEquipmentShellDrumResult: se.shellDrum?.result,
        visualCheckSteamEquipmentBouileurTrue: getCheckmark(se.bouileur?.status),
        visualCheckSteamEquipmentBouileurFalse: getOppositeCheckmark(se.bouileur?.status),
        visualCheckSteamEquipmentBouileurResult: se.bouileur?.result,
        visualCheckSteamEquipmentFurnaceTrue: getCheckmark(se.furnace?.status),
        visualCheckSteamEquipmentFurnaceFalse: getOppositeCheckmark(se.furnace?.status),
        visualCheckSteamEquipmentFurnaceResult: se.furnace?.result,
        visualCheckSteamEquipmentFireChamberTrue: getCheckmark(se.fireChamber?.status),
        visualCheckSteamEquipmentFireChamberFalse: getOppositeCheckmark(se.fireChamber?.status),
        visualCheckSteamEquipmentFireChamberResult: se.fireChamber?.result,
        visualCheckSteamEquipmentRefractoryTrue: getCheckmark(se.refractory?.status),
        visualCheckSteamEquipmentRefractoryFalse: getOppositeCheckmark(se.refractory?.status),
        visualCheckSteamEquipmentRefractoryResult: se.refractory?.result,
        visualCheckSteamEquipmentCombustionChamberTrue: getCheckmark(se.combustionChamber?.status),
        visualCheckSteamEquipmentCombustionChamberFalse: getOppositeCheckmark(se.combustionChamber?.status),
        visualCheckSteamEquipmentCombustionChamberResult: se.combustionChamber?.result,
        visualCheckSteamEquipmentFireTubesTrue: getCheckmark(se.fireTubes?.status),
        visualCheckSteamEquipmentFireTubesFalse: getOppositeCheckmark(se.fireTubes?.status),
        visualCheckSteamEquipmentFireTubesResult: se.fireTubes?.result,
        visualCheckSteamEquipmentSuperHeaterTrue: getCheckmark(se.superHeater?.status),
        visualCheckSteamEquipmentSuperHeaterFalse: getOppositeCheckmark(se.superHeater?.status),
        visualCheckSteamEquipmentSuperHeaterResult: se.superHeater?.result,
        visualCheckSteamEquipmentReheaterTrue: getCheckmark(se.reheater?.status),
        visualCheckSteamEquipmentReheaterFalse: getOppositeCheckmark(se.reheater?.status),
        visualCheckSteamEquipmentReheaterResult: se.reheater?.result,
        visualCheckSteamEquipmentEconomizerTrue: getCheckmark(se.economizer?.status),
        visualCheckSteamEquipmentEconomizerFalse: getOppositeCheckmark(se.economizer?.status),
        visualCheckSteamEquipmentEconomizerResult: se.economizer?.result,
        visualCheckBoilerDetailsGrateTrue: getCheckmark(bd.grate?.status),
        visualCheckBoilerDetailsGrateFalse: getOppositeCheckmark(bd.grate?.status),
        visualCheckBoilerDetailsGrateResult: bd.grate?.result,
        visualCheckBoilerDetailsBurnerTrue: getCheckmark(bd.burner?.status),
        visualCheckBoilerDetailsBurnerFalse: getOppositeCheckmark(bd.burner?.status),
        visualCheckBoilerDetailsBurnerResult: bd.burner?.result,
        visualCheckBoilerDetailsFdfTrue: getCheckmark(bd.fdf?.status),
        visualCheckBoilerDetailsFdfFalse: getOppositeCheckmark(bd.fdf?.status),
        visualCheckBoilerDetailsFdfResult: bd.fdf?.result,
        visualCheckBoilerDetailsIdfTrue: getCheckmark(bd.idf?.status),
        visualCheckBoilerDetailsIdfFalse: getOppositeCheckmark(bd.idf?.status),
        visualCheckBoilerDetailsIdfResult: bd.idf?.result,
        visualCheckBoilerDetailsAirHeaterTrue: getCheckmark(bd.airHeater?.status),
        visualCheckBoilerDetailsAirHeaterFalse: getOppositeCheckmark(bd.airHeater?.status),
        visualCheckBoilerDetailsAirHeaterResult: bd.airHeater?.result,
        visualCheckBoilerDetailsAirDuctTrue: getCheckmark(bd.airDuct?.status),
        visualCheckBoilerDetailsAirDuctFalse: getOppositeCheckmark(bd.airDuct?.status),
        visualCheckBoilerDetailsAirDuctResult: bd.airDuct?.result,
        visualCheckBoilerDetailsGasDuctTrue: getCheckmark(bd.gasDuct?.status),
        visualCheckBoilerDetailsGasDuctFalse: getOppositeCheckmark(bd.gasDuct?.status),
        visualCheckBoilerDetailsGasDuctResult: bd.gasDuct?.result,
        visualCheckBoilerDetailsAshCatcherTrue: getCheckmark(bd.ashCatcher?.status),
        visualCheckBoilerDetailsAshCatcherFalse: getOppositeCheckmark(bd.ashCatcher?.status),
        visualCheckBoilerDetailsAshCatcherResult: bd.ashCatcher?.result,
        visualCheckBoilerDetailsChimneyTrue: getCheckmark(bd.chimney?.status),
        visualCheckBoilerDetailsChimneyFalse: getOppositeCheckmark(bd.chimney?.status),
        visualCheckBoilerDetailsChimneyResult: bd.chimney?.result,
        visualCheckBoilerDetailsStairsTrue: getCheckmark(bd.stairs?.status),
        visualCheckBoilerDetailsStairsFalse: getOppositeCheckmark(bd.stairs?.status),
        visualCheckBoilerDetailsStairsResult: bd.stairs?.result,
        visualCheckBoilerDetailsInsulationTrue: getCheckmark(bd.insulation?.status),
        visualCheckBoilerDetailsInsulationFalse: getOppositeCheckmark(bd.insulation?.status),
        visualCheckBoilerDetailsInsulationResult: bd.insulation?.result,
        visualCheckSafetyValveRingTrue: getCheckmark(sd.safetyValveRing?.status),
        visualCheckSafetyValveRingFalse: getOppositeCheckmark(sd.safetyValveRing?.status),
        visualCheckSafetyValveRingResult: sd.safetyValveRing?.result,
        visualCheckSafetyValvePipeTrue: getCheckmark(sd.safetyValvePipe?.status),
        visualCheckSafetyValvePipeFalse: getOppositeCheckmark(sd.safetyValvePipe?.status),
        visualCheckSafetyValvePipeResult: sd.safetyValvePipe?.result,
        visualCheckSafetyValveExhaustTrue: getCheckmark(sd.safetyValveExhaust?.status),
        visualCheckSafetyValveExhaustFalse: getOppositeCheckmark(sd.safetyValveExhaust?.status),
        visualCheckSafetyValveExhaustResult: sd.safetyValveExhaust?.result,
        visualCheckPressureGaugeMarkTrue: getCheckmark(sd.pressureGaugeMark?.status),
        visualCheckPressureGaugeMarkFalse: getOppositeCheckmark(sd.pressureGaugeMark?.status),
        visualCheckPressureGaugeMarkResult: sd.pressureGaugeMark?.result,
        visualCheckPressureGaugeSiphonTrue: getCheckmark(sd.pressureGaugeSiphon?.status),
        visualCheckPressureGaugeSiphonFalse: getOppositeCheckmark(sd.pressureGaugeSiphon?.status),
        visualCheckPressureGaugeSiphonResult: sd.pressureGaugeSiphon?.result,
        visualCheckPressureGaugeCockTrue: getCheckmark(sd.pressureGaugeCock?.status),
        visualCheckPressureGaugeCockFalse: getOppositeCheckmark(sd.pressureGaugeCock?.status),
        visualCheckPressureGaugeCockResult: sd.pressureGaugeCock?.result,
        visualCheckGaugeGlassTryCocksTrue: getCheckmark(sd.gaugeGlassTryCocks?.status),
        visualCheckGaugeGlassTryCocksFalse: getOppositeCheckmark(sd.gaugeGlassTryCocks?.status),
        visualCheckGaugeGlassTryCocksResult: sd.gaugeGlassTryCocks?.result,
        visualCheckGaugeGlassBlowdownTrue: getCheckmark(sd.gaugeGlassBlowdown?.status),
        visualCheckGaugeGlassBlowdownFalse: getOppositeCheckmark(sd.gaugeGlassBlowdown?.status),
        visualCheckGaugeGlassBlowdownResult: sd.gaugeGlassBlowdown?.result,
        visualCheckWaterLevelLowestMarkTrue: getCheckmark(sd.waterLevelLowestMark?.status),
        visualCheckWaterLevelLowestMarkFalse: getOppositeCheckmark(sd.waterLevelLowestMark?.status),
        visualCheckWaterLevelLowestMarkResult: sd.waterLevelLowestMark?.result,
        visualCheckWaterLevelPositionTrue: getCheckmark(sd.waterLevelPosition?.status),
        visualCheckWaterLevelPositionFalse: getOppositeCheckmark(sd.waterLevelPosition?.status),
        visualCheckWaterLevelPositionResult: sd.waterLevelPosition?.result,
        visualCheckFeedwaterPumpTrue: getCheckmark(sd.feedwaterPump?.status),
        visualCheckFeedwaterPumpFalse: getOppositeCheckmark(sd.feedwaterPump?.status),
        visualCheckFeedwaterPumpResult: sd.feedwaterPump?.result,
        visualCheckFeedwaterCapacityTrue: getCheckmark(sd.feedwaterCapacity?.status),
        visualCheckFeedwaterCapacityFalse: getOppositeCheckmark(sd.feedwaterCapacity?.status),
        visualCheckFeedwaterCapacityResult: sd.feedwaterCapacity?.result,
        visualCheckFeedwaterMotorTrue: getCheckmark(sd.feedwaterMotor?.status),
        visualCheckFeedwaterMotorFalse: getOppositeCheckmark(sd.feedwaterMotor?.status),
        visualCheckFeedwaterMotorResult: sd.feedwaterMotor?.result,
        visualCheckFeedwaterCheckValveTrue: getCheckmark(sd.feedwaterCheckValve?.status),
        visualCheckFeedwaterCheckValveFalse: getOppositeCheckmark(sd.feedwaterCheckValve?.status),
        visualCheckFeedwaterCheckValveResult: sd.feedwaterCheckValve?.result,
        visualCheckControlBlacksFluitTrue: getCheckmark(sd.controlBlacksFluit?.status),
        visualCheckControlBlacksFluitFalse: getOppositeCheckmark(sd.controlBlacksFluit?.status),
        visualCheckControlBlacksFluitResult: sd.controlBlacksFluit?.result,
        visualCheckControlFusiblePlugTrue: getCheckmark(sd.controlFusiblePlug?.status),
        visualCheckControlFusiblePlugFalse: getOppositeCheckmark(sd.controlFusiblePlug?.status),
        visualCheckControlFusiblePlugResult: sd.controlFusiblePlug?.result,
        visualCheckControlWaterLevelTrue: getCheckmark(sd.controlWaterLevel?.status),
        visualCheckControlWaterLevelFalse: getOppositeCheckmark(sd.controlWaterLevel?.status),
        visualCheckControlWaterLevelResult: sd.controlWaterLevel?.result,
        visualCheckControlSteamPressureTrue: getCheckmark(sd.controlSteamPressure?.status),
        visualCheckControlSteamPressureFalse: getOppositeCheckmark(sd.controlSteamPressure?.status),
        visualCheckControlSteamPressureResult: sd.controlSteamPressure?.result,
        visualCheckBlowdownDescTrue: getCheckmark(sd.blowdownDesc?.status),
        visualCheckBlowdownDescFalse: getOppositeCheckmark(sd.blowdownDesc?.status),
        visualCheckBlowdownDescResult: sd.blowdownDesc?.result,
        visualCheckBlowdownMaterialTrue: getCheckmark(sd.blowdownMaterial?.status),
        visualCheckBlowdownMaterialFalse: getOppositeCheckmark(sd.blowdownMaterial?.status),
        visualCheckBlowdownMaterialResult: sd.blowdownMaterial?.result,
        visualCheckManholeManholeTrue: getCheckmark(sd.manholeManhole?.status),
        visualCheckManholeManholeFalse: getOppositeCheckmark(sd.manholeManhole?.status),
        visualCheckManholeManholeResult: sd.manholeManhole?.result,
        visualCheckManholeInspectionHoleTrue: getCheckmark(sd.manholeInspectionHole?.status),
        visualCheckManholeInspectionHoleFalse: getOppositeCheckmark(sd.manholeInspectionHole?.status),
        visualCheckManholeInspectionHoleResult: sd.manholeInspectionHole?.result,
        visualCheckIdMarkNameplateTrue: getCheckmark(sd.idMarkNameplate?.status),
        visualCheckIdMarkNameplateFalse: getOppositeCheckmark(sd.idMarkNameplate?.status),
        visualCheckIdMarkNameplateResult: sd.idMarkNameplate?.result,
        visualCheckIdMarkDataMatchTrue: getCheckmark(sd.idMarkDataMatch?.status),
        visualCheckIdMarkDataMatchFalse: getOppositeCheckmark(sd.idMarkDataMatch?.status),
        visualCheckIdMarkDataMatchResult: sd.idMarkDataMatch?.result,
        visualCheckIdMarkForm9StampTrue: getCheckmark(sd.idMarkForm9Stamp?.status),
        visualCheckIdMarkForm9StampFalse: getOppositeCheckmark(sd.idMarkForm9Stamp?.status),
        visualCheckIdMarkForm9StampResult: sd.idMarkForm9Stamp?.result,

        materialThicknessShellThicknessValue: mt.bodyShell?.thickness,
        materialThicknessShellThicknessResult: mt.bodyShell?.thicknessResult,
        materialThicknessShellDiameterValue: mt.bodyShell?.diameter,
        materialThicknessShellDiameterResult: mt.bodyShell?.diameterResult,
        materialThicknessHeaderDiameterValue: mt.vaporReceiverHeader?.diameter,
        materialThicknessHeaderDiameterResult: mt.vaporReceiverHeader?.diameterResult,
        materialThicknessHeaderThicknessValue: mt.vaporReceiverHeader?.thickness,
        materialThicknessHeaderThicknessResult: mt.vaporReceiverHeader?.thicknessResult,
        materialThicknessHeaderLengthValue: mt.vaporReceiverHeader?.length,
        materialThicknessHeaderLengthResult: mt.vaporReceiverHeader?.lengthResult,
        materialThicknessFurnace1DiameterValue: mt.fireHallFurnance1?.diameter,
        materialThicknessFurnace1DiameterResult: mt.fireHallFurnance1?.diameterResult,
        materialThicknessFurnace1ThicknessValue: mt.fireHallFurnance1?.thickness,
        materialThicknessFurnace1ThicknessResult: mt.fireHallFurnance1?.thicknessResult,
        materialThicknessFurnace1LengthValue: mt.fireHallFurnance1?.length,
        materialThicknessFurnace1LengthResult: mt.fireHallFurnance1?.lengthResult,
        materialThicknessFurnace2DiameterValue: mt.fireHallFurnance2?.diameter,
        materialThicknessFurnace2DiameterResult: mt.fireHallFurnance2?.diameterResult,
        materialThicknessFurnace2ThicknessValue: mt.fireHallFurnance2?.thickness,
        materialThicknessFurnace2ThicknessResult: mt.fireHallFurnance2?.thicknessResult,
        materialThicknessFurnace2LengthValue: mt.fireHallFurnance2?.length,
        materialThicknessFurnace2LengthResult: mt.fireHallFurnance2?.lengthResult,

        thicknessMeasurementSetupOwner: tms.owner,
        thicknessMeasurementSetupInspectionDate: tms.inspectionDate,
        thicknessMeasurementSetupProject: tms.project,
        thicknessMeasurementSetupObjectType: tms.objectType,
        thicknessMeasurementSetupWorkOrderNo: tms.workOrderNo,
        thicknessMeasurementSetupEquipmentUsed: tms.equipmentUsed,
        thicknessMeasurementSetupMethodUsed: tms.methodUsed,
        thicknessMeasurementSetupProbeType: tms.probeType,
        thicknessMeasurementSetupMaterialType: tms.materialType,
        thicknessMeasurementSetupProbeStyle: tms.probeStyle,
        thicknessMeasurementSetupOperatingTemp: tms.operatingTemp,
        thicknessMeasurementSetupSurfaceCondition: tms.surfaceCondition,
        thicknessMeasurementSetupWeldingProcess: tms.weldingProcess,
        thicknessMeasurementSetupLaminatingCheck: tms.laminatingCheck,
        thicknessMeasurementSetupCouplantUsed: tms.couplantUsed,
        
        measurementResultsTopHeadNominal: mr.topHead?.nominal,
        measurementResultsTopHeadPoint1: mr.topHead?.point1,
        measurementResultsTopHeadPoint2: mr.topHead?.point2,
        measurementResultsTopHeadPoint3: mr.topHead?.point3,
        measurementResultsTopHeadMinimum: mr.topHead?.minimum,
        measurementResultsTopHeadMaximum: mr.topHead?.maximum,
        measurementResultsShellNominal: mr.shell?.nominal,
        measurementResultsShellPoint1: mr.shell?.point1,
        measurementResultsShellPoint2: mr.shell?.point2,
        measurementResultsShellPoint3: mr.shell?.point3,
        measurementResultsShellMinimum: mr.shell?.minimum,
        measurementResultsShellMaximum: mr.shell?.maximum,
        measurementResultsButtonHeadNominal: mr.buttonHead?.nominal,
        measurementResultsButtonHeadPoint1: mr.buttonHead?.point1,
        measurementResultsButtonHeadPoint2: mr.buttonHead?.point2,
        measurementResultsButtonHeadPoint3: mr.buttonHead?.point3,
        measurementResultsButtonHeadMinimum: mr.buttonHead?.minimum,
        measurementResultsButtonHeadMaximum: mr.buttonHead?.maximum,

        ndtShellTestMethod: ndt.shell?.testMethod,
        ndtShellLongitudinalWeldJointLocation: ndt.shell?.longitudinalWeldJoint?.location,
        ndtShellLongitudinalWeldJointTrue: getCheckmark(ndt.shell?.longitudinalWeldJoint?.status),
        ndtShellLongitudinalWeldJointFalse: getOppositeCheckmark(ndt.shell?.longitudinalWeldJoint?.status),
        ndtShellLongitudinalWeldJointResult: ndt.shell?.longitudinalWeldJoint?.result,
        ndtShellCircumferentialWeldJointLocation: ndt.shell?.circumferentialWeldJoint?.location,
        ndtShellCircumferentialWeldJointTrue: getCheckmark(ndt.shell?.circumferentialWeldJoint?.status),
        ndtShellCircumferentialWeldJointFalse: getOppositeCheckmark(ndt.shell?.circumferentialWeldJoint?.status),
        ndtShellCircumferentialWeldJointResult: ndt.shell?.circumferentialWeldJoint?.result,
        
        ndtFurnaceTestMethod: ndt.furnace?.testMethod,
        ndtFurnaceLongitudinalWeldJointLocation: ndt.furnace?.longitudinalWeldJoint?.location,
        ndtFurnaceLongitudinalWeldJointTrue: getCheckmark(ndt.furnace?.longitudinalWeldJoint?.status),
        ndtFurnaceLongitudinalWeldJointFalse: getOppositeCheckmark(ndt.furnace?.longitudinalWeldJoint?.status),
        ndtFurnaceLongitudinalWeldJointResult: ndt.furnace?.longitudinalWeldJoint?.result,
        ndtFurnaceCircumferentialWeldJointLocation: ndt.furnace?.circumferentialWeldJoint?.location,
        ndtFurnaceCircumferentialWeldJointTrue: getCheckmark(ndt.furnace?.circumferentialWeldJoint?.status),
        ndtFurnaceCircumferentialWeldJointFalse: getOppositeCheckmark(ndt.furnace?.circumferentialWeldJoint?.status),
        ndtFurnaceCircumferentialWeldJointResult: ndt.furnace?.circumferentialWeldJoint?.result,

        ndtFireTubesTestMethod: ndt.fireTubes?.testMethod,
        ndtFireTubesWeldJointFrontLocation: ndt.fireTubes?.weldJointFront?.location,
        ndtFireTubesWeldJointFrontTrue: getCheckmark(ndt.fireTubes?.weldJointFront?.status),
        ndtFireTubesWeldJointFrontFalse: getOppositeCheckmark(ndt.fireTubes?.weldJointFront?.status),
        ndtFireTubesWeldJointFrontResult: ndt.fireTubes?.weldJointFront?.result,
        ndtFireTubesWeldJointRearLocation: ndt.fireTubes?.weldJointRear?.location,
        ndtFireTubesWeldJointRearTrue: getCheckmark(ndt.fireTubes?.weldJointRear?.status),
        ndtFireTubesWeldJointRearFalse: getOppositeCheckmark(ndt.fireTubes?.weldJointRear?.status),
        ndtFireTubesWeldJointRearResult: ndt.fireTubes?.weldJointRear?.result,

        hydrotestTestPressure: i.hydrotest?.testPressure,
        hydrotestMawp: i.hydrotest?.mawp,
        hydrotestTestMedium: i.hydrotest?.testMedium,
        hydrotestTestDate: i.hydrotest?.testDate,
        hydrotestTestResult: i.hydrotest?.testResult,

        appendagesCheckPressureGaugeQuantity: ac.workingPressureGauge?.quantity,
        appendagesCheckPressureGaugeTrue: getCheckmark(ac.workingPressureGauge?.status),
        appendagesCheckPressureGaugeFalse: getOppositeCheckmark(ac.workingPressureGauge?.status),
        appendagesCheckPressureGaugeResult: ac.workingPressureGauge?.result,
        appendagesCheckManHoleQuantity: ac.manHole?.quantity,
        appendagesCheckManHoleTrue: getCheckmark(ac.manHole?.status),
        appendagesCheckManHoleFalse: getOppositeCheckmark(ac.manHole?.status),
        appendagesCheckManHoleResult: ac.manHole?.result,
        appendagesCheckSafetyValveQuantity: ac.safetyValveFullOpen?.quantity,
        appendagesCheckSafetyValveTrue: getCheckmark(ac.safetyValveFullOpen?.status),
        appendagesCheckSafetyValveFalse: getOppositeCheckmark(ac.safetyValveFullOpen?.status),
        appendagesCheckSafetyValveResult: ac.safetyValveFullOpen?.result,
        appendagesCheckMainSteamValveQuantity: ac.mainSteamValve?.quantity,
        appendagesCheckMainSteamValveTrue: getCheckmark(ac.mainSteamValve?.status),
        appendagesCheckMainSteamValveFalse: getOppositeCheckmark(ac.mainSteamValve?.status),
        appendagesCheckMainSteamValveResult: ac.mainSteamValve?.result,
        appendagesCheckLevelGlassQuantity: ac.levelGlassIndicator?.quantity,
        appendagesCheckLevelGlassTrue: getCheckmark(ac.levelGlassIndicator?.status),
        appendagesCheckLevelGlassFalse: getOppositeCheckmark(ac.levelGlassIndicator?.status),
        appendagesCheckLevelGlassResult: ac.levelGlassIndicator?.result,
        appendagesCheckBlowdownValveQuantity: ac.blowdownValve?.quantity,
        appendagesCheckBlowdownValveTrue: getCheckmark(ac.blowdownValve?.status),
        appendagesCheckBlowdownValveFalse: getOppositeCheckmark(ac.blowdownValve?.status),
        appendagesCheckBlowdownValveResult: ac.blowdownValve?.result,
        appendagesCheckFeedwaterStopValveQuantity: ac.feedwaterStopValve?.quantity,
        appendagesCheckFeedwaterStopValveTrue: getCheckmark(ac.feedwaterStopValve?.status),
        appendagesCheckFeedwaterStopValveFalse: getOppositeCheckmark(ac.feedwaterStopValve?.status),
        appendagesCheckFeedwaterStopValveResult: ac.feedwaterStopValve?.result,
        appendagesCheckFeedwaterInletValveQuantity: ac.feedwaterInletValve?.quantity,
        appendagesCheckFeedwaterInletValveTrue: getCheckmark(ac.feedwaterInletValve?.status),
        appendagesCheckFeedwaterInletValveFalse: getOppositeCheckmark(ac.feedwaterInletValve?.status),
        appendagesCheckFeedwaterInletValveResult: ac.feedwaterInletValve?.result,
        appendagesCheckSteamDrierQuantity: ac.steamDrier?.quantity,
        appendagesCheckSteamDrierTrue: getCheckmark(ac.steamDrier?.status),
        appendagesCheckSteamDrierFalse: getOppositeCheckmark(ac.steamDrier?.status),
        appendagesCheckSteamDrierResult: ac.steamDrier?.result,
        appendagesCheckWaterPumpQuantity: ac.waterPump?.quantity,
        appendagesCheckWaterPumpTrue: getCheckmark(ac.waterPump?.status),
        appendagesCheckWaterPumpFalse: getOppositeCheckmark(ac.waterPump?.status),
        appendagesCheckWaterPumpResult: ac.waterPump?.result,
        appendagesCheckControlPanelQuantity: ac.controlPanel?.quantity,
        appendagesCheckControlPanelTrue: getCheckmark(ac.controlPanel?.status),
        appendagesCheckControlPanelFalse: getOppositeCheckmark(ac.controlPanel?.status),
        appendagesCheckControlPanelResult: ac.controlPanel?.result,
        appendagesCheckNameplateQuantity: ac.nameplate?.quantity,
        appendagesCheckNameplateTrue: getCheckmark(ac.nameplate?.status),
        appendagesCheckNameplateFalse: getOppositeCheckmark(ac.nameplate?.status),
        appendagesCheckNameplateResult: ac.nameplate?.result,

        safetyValveTestHeader: i.safetyValveTest?.header,
        safetyValveTestStartsToOpen: i.safetyValveTest?.startsToOpen,
        safetyValveTestValveInfo: i.safetyValveTest?.valveInfo,

        conclusion: data.conclusion,
        recommendations: data.recommendations
    };

    doc.render(renderData);

    const docxBuffer = doc.getZip().generate({ type: 'nodebuffer' });
    const companyName = g.companyName?.replace(/\s+/g, '-') || 'UnknownCompany';
    const fileName = `Laporan-PUBT-${companyName}-${data.id}.docx`;

    return { docxBuffer, fileName };
};

module.exports = { createLaporanPubt };